// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingProtoInterfaceClient is the client API for MessagingProtoInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingProtoInterfaceClient interface {
	CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*UuidMsg, error)
	GetConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ConvMsgResponse, error)
	GetConversationsByUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayConversationResponse, error)
	UpdateConversationLastMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ConvMsgResponse, error)
	UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*ConvMsgResponse, error)
	CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UuidMsg, error)
	GetMessage(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*MessageMsgResponse, error)
	GetMessagesByAuthor(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayMessageResponse, error)
	GetMessagesByConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayMessageResponse, error)
	CreateUserConversation(ctx context.Context, in *UserConversation, opts ...grpc.CallOption) (*UuidMsg, error)
	GetUserConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UCMsgResponse, error)
	GetUserConversationsForUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayUserConversationResponse, error)
	GetUserConversationsForConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayUserConversationResponse, error)
	UpdateUserConversation(ctx context.Context, in *UserConversation, opts ...grpc.CallOption) (*UCMsgResponse, error)
}

type messagingProtoInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingProtoInterfaceClient(cc grpc.ClientConnInterface) MessagingProtoInterfaceClient {
	return &messagingProtoInterfaceClient{cc}
}

func (c *messagingProtoInterfaceClient) CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*UuidMsg, error) {
	out := new(UuidMsg)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ConvMsgResponse, error) {
	out := new(ConvMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetConversationsByUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayConversationResponse, error) {
	out := new(ArrayConversationResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetConversationsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) UpdateConversationLastMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ConvMsgResponse, error) {
	out := new(ConvMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/UpdateConversationLastMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*ConvMsgResponse, error) {
	out := new(ConvMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/UpdateConversationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UuidMsg, error) {
	out := new(UuidMsg)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetMessage(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*MessageMsgResponse, error) {
	out := new(MessageMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetMessagesByAuthor(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayMessageResponse, error) {
	out := new(ArrayMessageResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetMessagesByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetMessagesByConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayMessageResponse, error) {
	out := new(ArrayMessageResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetMessagesByConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) CreateUserConversation(ctx context.Context, in *UserConversation, opts ...grpc.CallOption) (*UuidMsg, error) {
	out := new(UuidMsg)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/CreateUserConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetUserConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UCMsgResponse, error) {
	out := new(UCMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetUserConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetUserConversationsForUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayUserConversationResponse, error) {
	out := new(ArrayUserConversationResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetUserConversationsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) GetUserConversationsForConversation(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*ArrayUserConversationResponse, error) {
	out := new(ArrayUserConversationResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/GetUserConversationsForConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingProtoInterfaceClient) UpdateUserConversation(ctx context.Context, in *UserConversation, opts ...grpc.CallOption) (*UCMsgResponse, error) {
	out := new(UCMsgResponse)
	err := c.cc.Invoke(ctx, "/MessagingProtoInterface/UpdateUserConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingProtoInterfaceServer is the server API for MessagingProtoInterface service.
// All implementations must embed UnimplementedMessagingProtoInterfaceServer
// for forward compatibility
type MessagingProtoInterfaceServer interface {
	CreateConversation(context.Context, *Conversation) (*UuidMsg, error)
	GetConversation(context.Context, *Uuid) (*ConvMsgResponse, error)
	GetConversationsByUser(context.Context, *Uuid) (*ArrayConversationResponse, error)
	UpdateConversationLastMsg(context.Context, *Message) (*ConvMsgResponse, error)
	UpdateConversationInfo(context.Context, *Conversation) (*ConvMsgResponse, error)
	CreateMessage(context.Context, *Message) (*UuidMsg, error)
	GetMessage(context.Context, *Uuid) (*MessageMsgResponse, error)
	GetMessagesByAuthor(context.Context, *Uuid) (*ArrayMessageResponse, error)
	GetMessagesByConversation(context.Context, *Uuid) (*ArrayMessageResponse, error)
	CreateUserConversation(context.Context, *UserConversation) (*UuidMsg, error)
	GetUserConversation(context.Context, *Uuid) (*UCMsgResponse, error)
	GetUserConversationsForUser(context.Context, *Uuid) (*ArrayUserConversationResponse, error)
	GetUserConversationsForConversation(context.Context, *Uuid) (*ArrayUserConversationResponse, error)
	UpdateUserConversation(context.Context, *UserConversation) (*UCMsgResponse, error)
	mustEmbedUnimplementedMessagingProtoInterfaceServer()
}

// UnimplementedMessagingProtoInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingProtoInterfaceServer struct {
}

func (UnimplementedMessagingProtoInterfaceServer) CreateConversation(context.Context, *Conversation) (*UuidMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetConversation(context.Context, *Uuid) (*ConvMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetConversationsByUser(context.Context, *Uuid) (*ArrayConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationsByUser not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) UpdateConversationLastMsg(context.Context, *Message) (*ConvMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationLastMsg not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) UpdateConversationInfo(context.Context, *Conversation) (*ConvMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationInfo not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) CreateMessage(context.Context, *Message) (*UuidMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetMessage(context.Context, *Uuid) (*MessageMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetMessagesByAuthor(context.Context, *Uuid) (*ArrayMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByAuthor not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetMessagesByConversation(context.Context, *Uuid) (*ArrayMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) CreateUserConversation(context.Context, *UserConversation) (*UuidMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetUserConversation(context.Context, *Uuid) (*UCMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetUserConversationsForUser(context.Context, *Uuid) (*ArrayUserConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConversationsForUser not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) GetUserConversationsForConversation(context.Context, *Uuid) (*ArrayUserConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConversationsForConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) UpdateUserConversation(context.Context, *UserConversation) (*UCMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserConversation not implemented")
}
func (UnimplementedMessagingProtoInterfaceServer) mustEmbedUnimplementedMessagingProtoInterfaceServer() {
}

// UnsafeMessagingProtoInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingProtoInterfaceServer will
// result in compilation errors.
type UnsafeMessagingProtoInterfaceServer interface {
	mustEmbedUnimplementedMessagingProtoInterfaceServer()
}

func RegisterMessagingProtoInterfaceServer(s grpc.ServiceRegistrar, srv MessagingProtoInterfaceServer) {
	s.RegisterService(&MessagingProtoInterface_ServiceDesc, srv)
}

func _MessagingProtoInterface_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).CreateConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetConversation(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetConversationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetConversationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetConversationsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetConversationsByUser(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_UpdateConversationLastMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).UpdateConversationLastMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/UpdateConversationLastMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).UpdateConversationLastMsg(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_UpdateConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).UpdateConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/UpdateConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).UpdateConversationInfo(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).CreateMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetMessage(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetMessagesByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetMessagesByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetMessagesByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetMessagesByAuthor(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetMessagesByConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetMessagesByConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetMessagesByConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetMessagesByConversation(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_CreateUserConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserConversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).CreateUserConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/CreateUserConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).CreateUserConversation(ctx, req.(*UserConversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetUserConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetUserConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetUserConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetUserConversation(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetUserConversationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetUserConversationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetUserConversationsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetUserConversationsForUser(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_GetUserConversationsForConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).GetUserConversationsForConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/GetUserConversationsForConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).GetUserConversationsForConversation(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingProtoInterface_UpdateUserConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserConversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingProtoInterfaceServer).UpdateUserConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessagingProtoInterface/UpdateUserConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingProtoInterfaceServer).UpdateUserConversation(ctx, req.(*UserConversation))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingProtoInterface_ServiceDesc is the grpc.ServiceDesc for MessagingProtoInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingProtoInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessagingProtoInterface",
	HandlerType: (*MessagingProtoInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _MessagingProtoInterface_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _MessagingProtoInterface_GetConversation_Handler,
		},
		{
			MethodName: "GetConversationsByUser",
			Handler:    _MessagingProtoInterface_GetConversationsByUser_Handler,
		},
		{
			MethodName: "UpdateConversationLastMsg",
			Handler:    _MessagingProtoInterface_UpdateConversationLastMsg_Handler,
		},
		{
			MethodName: "UpdateConversationInfo",
			Handler:    _MessagingProtoInterface_UpdateConversationInfo_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _MessagingProtoInterface_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MessagingProtoInterface_GetMessage_Handler,
		},
		{
			MethodName: "GetMessagesByAuthor",
			Handler:    _MessagingProtoInterface_GetMessagesByAuthor_Handler,
		},
		{
			MethodName: "GetMessagesByConversation",
			Handler:    _MessagingProtoInterface_GetMessagesByConversation_Handler,
		},
		{
			MethodName: "CreateUserConversation",
			Handler:    _MessagingProtoInterface_CreateUserConversation_Handler,
		},
		{
			MethodName: "GetUserConversation",
			Handler:    _MessagingProtoInterface_GetUserConversation_Handler,
		},
		{
			MethodName: "GetUserConversationsForUser",
			Handler:    _MessagingProtoInterface_GetUserConversationsForUser_Handler,
		},
		{
			MethodName: "GetUserConversationsForConversation",
			Handler:    _MessagingProtoInterface_GetUserConversationsForConversation_Handler,
		},
		{
			MethodName: "UpdateUserConversation",
			Handler:    _MessagingProtoInterface_UpdateUserConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/clients/rpc/messaging/messaging.proto",
}
