// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersProtoInterfaceClient is the client API for UsersProtoInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersProtoInterfaceClient interface {
	GetUserByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserMsgResponse, error)
	GetUserProfileByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserProfileMsgResponse, error)
	DeleteUserByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*SvrMsg, error)
	CreateUser(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UuidResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserProfileMsgResponse, error)
	UpdateActive(ctx context.Context, in *UpdateActiveRequest, opts ...grpc.CallOption) (*SvrMsg, error)
}

type usersProtoInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersProtoInterfaceClient(cc grpc.ClientConnInterface) UsersProtoInterfaceClient {
	return &usersProtoInterfaceClient{cc}
}

func (c *usersProtoInterfaceClient) GetUserByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserMsgResponse, error) {
	out := new(UserMsgResponse)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/GetUserByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtoInterfaceClient) GetUserProfileByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserProfileMsgResponse, error) {
	out := new(UserProfileMsgResponse)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/GetUserProfileByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtoInterfaceClient) DeleteUserByUuid(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*SvrMsg, error) {
	out := new(SvrMsg)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/DeleteUserByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtoInterfaceClient) CreateUser(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UuidResponse, error) {
	out := new(UuidResponse)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtoInterfaceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserProfileMsgResponse, error) {
	out := new(UserProfileMsgResponse)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtoInterfaceClient) UpdateActive(ctx context.Context, in *UpdateActiveRequest, opts ...grpc.CallOption) (*SvrMsg, error) {
	out := new(SvrMsg)
	err := c.cc.Invoke(ctx, "/UsersProtoInterface/UpdateActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersProtoInterfaceServer is the server API for UsersProtoInterface service.
// All implementations must embed UnimplementedUsersProtoInterfaceServer
// for forward compatibility
type UsersProtoInterfaceServer interface {
	GetUserByUuid(context.Context, *Uuid) (*UserMsgResponse, error)
	GetUserProfileByUuid(context.Context, *Uuid) (*UserProfileMsgResponse, error)
	DeleteUserByUuid(context.Context, *Uuid) (*SvrMsg, error)
	CreateUser(context.Context, *UserProfile) (*UuidResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserProfileMsgResponse, error)
	UpdateActive(context.Context, *UpdateActiveRequest) (*SvrMsg, error)
	mustEmbedUnimplementedUsersProtoInterfaceServer()
}

// UnimplementedUsersProtoInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersProtoInterfaceServer struct {
}

func (UnimplementedUsersProtoInterfaceServer) GetUserByUuid(context.Context, *Uuid) (*UserMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUuid not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) GetUserProfileByUuid(context.Context, *Uuid) (*UserProfileMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileByUuid not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) DeleteUserByUuid(context.Context, *Uuid) (*SvrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByUuid not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) CreateUser(context.Context, *UserProfile) (*UuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserProfileMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) UpdateActive(context.Context, *UpdateActiveRequest) (*SvrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActive not implemented")
}
func (UnimplementedUsersProtoInterfaceServer) mustEmbedUnimplementedUsersProtoInterfaceServer() {}

// UnsafeUsersProtoInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersProtoInterfaceServer will
// result in compilation errors.
type UnsafeUsersProtoInterfaceServer interface {
	mustEmbedUnimplementedUsersProtoInterfaceServer()
}

func RegisterUsersProtoInterfaceServer(s grpc.ServiceRegistrar, srv UsersProtoInterfaceServer) {
	s.RegisterService(&UsersProtoInterface_ServiceDesc, srv)
}

func _UsersProtoInterface_GetUserByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).GetUserByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/GetUserByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).GetUserByUuid(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersProtoInterface_GetUserProfileByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).GetUserProfileByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/GetUserProfileByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).GetUserProfileByUuid(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersProtoInterface_DeleteUserByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).DeleteUserByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/DeleteUserByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).DeleteUserByUuid(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersProtoInterface_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).CreateUser(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersProtoInterface_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersProtoInterface_UpdateActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersProtoInterfaceServer).UpdateActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersProtoInterface/UpdateActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersProtoInterfaceServer).UpdateActive(ctx, req.(*UpdateActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersProtoInterface_ServiceDesc is the grpc.ServiceDesc for UsersProtoInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersProtoInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersProtoInterface",
	HandlerType: (*UsersProtoInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUuid",
			Handler:    _UsersProtoInterface_GetUserByUuid_Handler,
		},
		{
			MethodName: "GetUserProfileByUuid",
			Handler:    _UsersProtoInterface_GetUserProfileByUuid_Handler,
		},
		{
			MethodName: "DeleteUserByUuid",
			Handler:    _UsersProtoInterface_DeleteUserByUuid_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersProtoInterface_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersProtoInterface_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateActive",
			Handler:    _UsersProtoInterface_UpdateActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/clients/rpc/users.proto",
}
